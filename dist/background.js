(()=>{"use strict";const t={categories:["Work","Social","Entertainment","Shopping","Other"],customCategories:{},retentionDays:30},e={activities:[],dailyStats:{},settings:t};class a{constructor(){}static getInstance(){return a.instance||(a.instance=new a),a.instance}async initialize(){await this.getData()||await this.setData(e)}async getData(){return new Promise((t=>{chrome.storage.local.get(null,(e=>{if(!(e&&e.activities&&e.dailyStats&&e.settings))return void t(null);const a={activities:e.activities,dailyStats:e.dailyStats,settings:e.settings};t(a)}))}))}async setData(t){return new Promise((e=>{chrome.storage.local.set(t,(()=>{e()}))}))}async addActivity(t){const e=await this.getData();if(!e)return;const a=(new Date).toISOString().split("T")[0];e.activities.push(t),e.dailyStats[a]||(e.dailyStats[a]={date:a,categories:{}});const s=e.dailyStats[a].categories[t.category]||{totalTime:0,visitCount:0};s.totalTime+=t.duration,s.visitCount+=1,e.dailyStats[a].categories[t.category]=s;const i=new Date;i.setDate(i.getDate()-e.settings.retentionDays);const o=i.toISOString().split("T")[0];e.activities=e.activities.filter((t=>new Date(t.startTime).toISOString().split("T")[0]>=o)),Object.keys(e.dailyStats).forEach((t=>{t<o&&delete e.dailyStats[t]})),await this.setData(e)}async getDailyStats(t){const e=await this.getData();return e?.dailyStats[t]||null}async getSettings(){const e=await this.getData();return e?.settings||t}async updateSettings(t){const e=await this.getData();e&&(e.settings={...e.settings,...t},await this.setData(e))}}const s=JSON.parse('{"L":{"Work":{"patterns":["^(?:.*\\\\.)?github\\\\.com$","^(?:.*\\\\.)?gitlab\\\\.com$","^(?:.*\\\\.)?bitbucket\\\\.org$","^(?:.*\\\\.)?jira\\\\.com$","^(?:.*\\\\.)?confluence\\\\.com$","^(?:.*\\\\.)?slack\\\\.com$","^(?:.*\\\\.)?trello\\\\.com$","^(?:.*\\\\.)?notion\\\\.so$","^(?:.*\\\\.)?docs\\\\.google\\\\.com$","^(?:.*\\\\.)?sheets\\\\.google\\\\.com$","^(?:.*\\\\.)?drive\\\\.google\\\\.com$","^(?:.*\\\\.)?linkedin\\\\.com$"]},"Social":{"patterns":["^(?:.*\\\\.)?facebook\\\\.com$","^(?:.*\\\\.)?twitter\\\\.com$","^(?:.*\\\\.)?instagram\\\\.com$","^(?:.*\\\\.)?tiktok\\\\.com$","^(?:.*\\\\.)?reddit\\\\.com$","^(?:.*\\\\.)?pinterest\\\\.com$","^(?:.*\\\\.)?snapchat\\\\.com$","^(?:.*\\\\.)?whatsapp\\\\.com$","^(?:.*\\\\.)?messenger\\\\.com$","^(?:.*\\\\.)?discord\\\\.com$","^(?:.*\\\\.)?telegram\\\\.org$"]},"Entertainment":{"patterns":["^(?:.*\\\\.)?youtube\\\\.com$","^(?:.*\\\\.)?netflix\\\\.com$","^(?:.*\\\\.)?hulu\\\\.com$","^(?:.*\\\\.)?disney\\\\.com$","^(?:.*\\\\.)?twitch\\\\.tv$","^(?:.*\\\\.)?spotify\\\\.com$","^(?:.*\\\\.)?soundcloud\\\\.com$","^(?:.*\\\\.)?vimeo\\\\.com$","^(?:.*\\\\.)?hbomax\\\\.com$","^(?:.*\\\\.)?primevideo\\\\.com$"]},"Shopping":{"patterns":["^(?:.*\\\\.)?amazon\\\\.(?:com|co\\\\.uk|de|fr|it|es|in|ca|com\\\\.au)$","^(?:.*\\\\.)?ebay\\\\.(?:com|co\\\\.uk|de|fr|it|es|in|ca|com\\\\.au)$","^(?:.*\\\\.)?walmart\\\\.com$","^(?:.*\\\\.)?target\\\\.com$","^(?:.*\\\\.)?bestbuy\\\\.com$","^(?:.*\\\\.)?etsy\\\\.com$","^(?:.*\\\\.)?aliexpress\\\\.com$","^(?:.*\\\\.)?shopify\\\\.com$"]},"News":{"patterns":["^(?:.*\\\\.)?nytimes\\\\.com$","^(?:.*\\\\.)?bbc\\\\.(?:com|co\\\\.uk)$","^(?:.*\\\\.)?cnn\\\\.com$","^(?:.*\\\\.)?reuters\\\\.com$","^(?:.*\\\\.)?bloomberg\\\\.com$","^(?:.*\\\\.)?theguardian\\\\.com$","^(?:.*\\\\.)?washingtonpost\\\\.com$","^(?:.*\\\\.)?wsj\\\\.com$"]},"Education":{"patterns":["^(?:.*\\\\.)?coursera\\\\.org$","^(?:.*\\\\.)?udemy\\\\.com$","^(?:.*\\\\.)?edx\\\\.org$","^(?:.*\\\\.)?khanacademy\\\\.org$","^(?:.*\\\\.)?duolingo\\\\.com$","^(?:.*\\\\.)?wikipedia\\\\.org$","^(?:.*\\\\.)?stackoverflow\\\\.com$","^(?:.*\\\\.)?github\\\\.io$"]}}}');class i{constructor(){this.CACHE_DURATION=864e5,this.MAX_CACHE_SIZE=1e3,this.categoryPatterns=new Map,this.cache=new Map,this.initializePatterns()}static getInstance(){return i.instance||(i.instance=new i),i.instance}initializePatterns(){const t=s.L;for(const[e,{patterns:a}]of Object.entries(t))this.categoryPatterns.set(e,a.map((t=>new RegExp(t))))}getDomainFromUrl(t){try{return new URL(t).hostname.toLowerCase()}catch{return""}}cleanCache(){const t=Date.now();for(const[e,a]of this.cache.entries())t-a.timestamp>this.CACHE_DURATION&&this.cache.delete(e);if(this.cache.size>this.MAX_CACHE_SIZE){const t=Array.from(this.cache.entries()).sort(((t,e)=>t[1].timestamp-e[1].timestamp)),e=t.slice(0,t.length-this.MAX_CACHE_SIZE);for(const[t]of e)this.cache.delete(t)}}async categorizeUrl(t,e){const a=this.getDomainFromUrl(t);if(!a)return"Other";if(e?.[a])return e[a];const s=this.cache.get(a);if(s&&Date.now()-s.timestamp<=this.CACHE_DURATION)return s.category;for(const[t,e]of this.categoryPatterns.entries())for(const s of e)if(s.test(a))return this.cache.set(a,{category:t,timestamp:Date.now()}),this.cleanCache(),t;return this.cache.set(a,{category:"Other",timestamp:Date.now()}),this.cleanCache(),"Other"}addCustomPattern(t,e){const a=this.categoryPatterns.get(t)||[];try{const s=new RegExp(e);this.categoryPatterns.set(t,[...a,s])}catch(t){throw console.error("Invalid regex pattern:",t),new Error("Invalid pattern format")}}clearCache(){this.cache.clear()}getCategories(){return Array.from(this.categoryPatterns.keys())}}let o=null;const c=a.getInstance(),n=i.getInstance();async function r(t){const e=await c.getSettings();return n.categorizeUrl(t,e.customCategories)}async function m(t){if(!t.url||t.url.startsWith("chrome://"))return;const e={tabId:t.id.toString(),url:t.url,title:t.title,category:await r(t.url),startTime:t.startTime,duration:Date.now()-t.startTime};await c.addActivity(e)}async function l(t,e,a){o&&await m(o),o=e&&!e.startsWith("chrome://")?{id:t,url:e,title:a,startTime:Date.now()}:null}Promise.all([c.initialize()]).catch(console.error),chrome.tabs.onActivated.addListener((async t=>{const e=await chrome.tabs.get(t.tabId);e&&e.url&&e.title&&await l(e.id,e.url,e.title)})),chrome.tabs.onUpdated.addListener(((t,e,a)=>{"complete"===e.status&&a.active&&a.url&&a.title&&l(t,a.url,a.title).catch(console.error)})),chrome.windows.onFocusChanged.addListener((async t=>{if(t===chrome.windows.WINDOW_ID_NONE)o&&(await m(o),o=null);else{const[t]=await chrome.tabs.query({active:!0,currentWindow:!0});t&&t.id&&t.url&&t.title&&await l(t.id,t.url,t.title)}})),chrome.alarms.create("syncStats",{periodInMinutes:1}),chrome.alarms.onAlarm.addListener((async t=>{"syncStats"===t.name&&o&&(await m(o),o={...o,startTime:Date.now()})}))})();